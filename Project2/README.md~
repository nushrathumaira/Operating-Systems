Project 2a: The Unix Shell
In the unix shell program whoosh, the first thing it does when fired is build a path array to save "/bin" into its path (This part is weird because it is not clearly clarified in the documentation). Then, the program will keep reading command lines and parse them into some meaningful tokens for execution.
The built-in commands includes: exit, cd, pwd and path. "exit" will stop the shell program. "cd" will change the directory into the given one, if no directory is given, change the directory to "HOME". "pwd" will print out the current path with directory. "path" will reset the path of the program. One thing that needs to be mentioned here is that "/bin" will always be included in paths.
If the command is not built-in, then the program will first check if there is such a program in the paths. Then it will create a new process for the given program and execute it. Note that if redirection is announced, the program will create two new files, namely .out and .err file, to store the output and error messages only for this command.
All the errors happened in the shell program will be handled by printing "An error has occured" to STDERR_FILENO.

Project 2b: xv6 Scheduler
Two new system calls are added: sys_setpri and sys_getpinfo. To support these two new features, I also added three new fields in the proc struct to store the priority and the time running in high/low priority of the process. The scheduler will also run the process with high priority first if one exists. Only when the scheduler checks all the processes and cannot find any RUNNABLE processes will it run the low-priority processes. However, before running each low-priority process, the scheduler will check all the processes again to make sure there is no new high-processes becomes runnable. 
The number of ticks each process has accumulated in both priority is calculated after each process finishes its turn, and all the ticks information will be cleared after the process becomes UNUSED.
